import streamlit as st
import requests
import base64

st.set_page_config(page_title="Generador de Im√°genes Hist√≥ricas", layout="wide")

st.title("üß† Generador de Im√°genes con IA - Escenas Hist√≥ricas")
st.markdown("""
Ingresa una √©poca hist√≥rica y una acci√≥n o escena para generar im√°genes cinematogr√°ficas con IA.
Usamos **Stable Diffusion XL 1.0** de Stability AI, en formato horizontal 16:9 (1024x576 px).
""")

# Entrada usuario con formulario
with st.form("formulario_prompt"):
    epoch = st.text_input("üìú √âpoca hist√≥rica", placeholder="Ej: Edad Media, siglo XV")
    action = st.text_input("üé¨ Acci√≥n o escena", placeholder="Ej: Caballeros en batalla al amanecer")
    submitted = st.form_submit_button("Generar im√°genes")

# API Key (desde secrets o input manual)
API_KEY = st.secrets.get("STABILITY_API_KEY") or st.text_input("üîê Ingresa tu API Key de Stability AI", type="password")

engine_id = "stable-diffusion-xl-1024-v1-0"
url = f"https://api.stability.ai/v1/generation/{engine_id}/text-to-image"

headers = {
    "Authorization": f"Bearer {API_KEY}",
    "Content-Type": "application/json",
    "Accept": "application/json"
}

if submitted:
    if not epoch or not action:
        st.warning("Por favor, completa ambos campos antes de generar im√°genes.")
    elif not API_KEY:
        st.warning("Por favor, ingresa tu API Key para poder usar la API.")
    else:
        prompt = f"{epoch}, {action}, cinematic, realistic, high detail, 16:9 aspect ratio"
        payload = {
            "text_prompts": [
                {"text": prompt}
            ],
            "cfg_scale": 8.0,
            "clip_guidance_preset": "FAST_BLUE",
            "height": 576,
            "width": 1024,
            "samples": 5,
            "steps": 30
        }

        with st.spinner("Generando im√°genes..."):
            try:
                response = requests.post(url, headers=headers, json=payload)
                response.raise_for_status()
                data = response.json()
                images = data.get("artifacts", [])

                if not images:
                    st.error("No se generaron im√°genes. Intenta cambiar el prompt o intenta m√°s tarde.")
                else:
                    st.success(f"‚úÖ Se generaron {len(images)} im√°genes.")
                    cols = st.columns(len(images))
                    for idx, img in enumerate(images):
                        image_data = base64.b64decode(img["base64"])
                        with cols[idx]:
                            st.image(image_data, use_column_width=True)
                            st.download_button(
                                label="Descargar",
                                data=image_data,
                                file_name=f"imagen_{idx+1}.png",
                                mime="image/png"
                            )
            except Exception as e:
                st.error(f"Error al generar im√°genes: {e}")
